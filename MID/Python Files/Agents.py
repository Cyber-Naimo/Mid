# -*- coding: utf-8 -*-
"""agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ytwhvVdon1zg6j87SRP2-e8bwbdO2S0V
"""

!pip install -U aima3

from aima3.agents import *
from aima3.notebook import psource

import collections
collections.Callable = collections.abc.Callable

psource(TrivialVacuumEnvironment)

# These are the two locations for the two-state environment
loc_A, loc_B = (0, 0), (1, 0)

# Initialize the two-state environment
trivial_vacuum_env = TrivialVacuumEnvironment()

# Check the initial state of the environment
print("State of the Environment: {}.".format(trivial_vacuum_env.status))

## random agent
# Create the random agent
random_agent = Agent(program=RandomAgentProgram(['Right', 'Left', 'Suck', 'NoOp']))


# Add agent to the environment
trivial_vacuum_env.add_thing(random_agent)
print("RandomVacuumAgent is located at {}.".format(random_agent.location))

# Running the environment
trivial_vacuum_env.step()

# Check the current state of the environment
print("State of the Environment: {}.".format(trivial_vacuum_env.status))

print("RandomVacuumAgent is located at {}.".format(random_agent.location))

##table driven agent
table = {((loc_A, 'Clean'),): 'Right',
             ((loc_A, 'Dirty'),): 'Suck',
             ((loc_B, 'Clean'),): 'Left',
             ((loc_B, 'Dirty'),): 'Suck',
             ((loc_A, 'Dirty'), (loc_A, 'Clean')): 'Right',
             ((loc_A, 'Clean'), (loc_B, 'Dirty')): 'Suck',
             ((loc_B, 'Clean'), (loc_A, 'Dirty')): 'Suck',
             ((loc_B, 'Dirty'), (loc_B, 'Clean')): 'Left',
             ((loc_A, 'Dirty'), (loc_A, 'Clean'), (loc_B, 'Dirty')): 'Suck',
             ((loc_B, 'Dirty'), (loc_B, 'Clean'), (loc_A, 'Dirty')): 'Suck'
        }
# Create a table-driven agent
table_driven_agent = Agent(program=TableDrivenAgentProgram(table=table))

##removing previos agent env
trivial_vacuum_env.delete_thing(random_agent)

# Add the table-driven agent to the environment
trivial_vacuum_env.add_thing(table_driven_agent)
print("TableDrivenVacuumAgent is located at {}.".format(table_driven_agent.location))
for x in range(3):
    # Run the environment
    trivial_vacuum_env.step()

    # Check the current state of the environment
    print("State of the Environment: {}.".format(trivial_vacuum_env.status))

    print("TableDrivenVacuumAgent is located at {}.".format(table_driven_agent.location))

##simple reflex agent

# Delete the previously added table-driven agent
trivial_vacuum_env.delete_thing(table_driven_agent)

loc_A = (0, 0)
loc_B = (1, 0)
def SimpleReflexAgentProgram():
    def program(percept):
        loc, status = percept
        return ('Suck' if status == 'Dirty'
                else'Right' if loc == loc_A
                            else'Left')
    return program


# Create a simple reflex agent the two-state environment
program = SimpleReflexAgentProgram()
simple_reflex_agent = Agent(program)

# These are the two locations for the two-state environment
loc_A, loc_B = (0, 0), (1, 0)

# Initialize the two-state environment
trivial_vacuum_env = TrivialVacuumEnvironment()

# Check the initial state of the environment
print("State of the Environment: {}.".format(trivial_vacuum_env.status))

trivial_vacuum_env.add_thing(simple_reflex_agent)

print("SimpleReflexVacuumAgent is located at {}.".format(simple_reflex_agent.location))

for x in range(3):
    # Run the environment
    trivial_vacuum_env.step()

    # Check the current state of the environment
    print("State of the Environment: {}.".format(trivial_vacuum_env.status))

    print("SimpleReflexVacuumAgent is located at {}.".format(simple_reflex_agent.location))

## model based
# Delete the previously added simple reflex agent
trivial_vacuum_env.delete_thing(simple_reflex_agent)
# These are the two locations for the two-state environment
loc_A, loc_B = (0, 0), (1, 0)

# Initialize the two-state environment
trivial_vacuum_env = TrivialVacuumEnvironment()

# Check the initial state of the environment
print("State of the Environment: {}.".format(trivial_vacuum_env.status))
# TODO: Implement this function for the two-dimensional environment
def update_state(state, action, percept, model):
    pass

# Create a model-based reflex agent
model_based_reflex_agent = ModelBasedVacuumAgent()

# Add the agent to the environment
trivial_vacuum_env.add_thing(model_based_reflex_agent)

print("ModelBasedVacuumAgent is located at {}.".format(model_based_reflex_agent.location))
for x in range(3):
    # Run the environment
    trivial_vacuum_env.step()

    # Check the current state of the environment
    print("State of the Environment: {}.".format(trivial_vacuum_env.status))

    print("ModelBasedVacuumAgent is located at {}.".format(model_based_reflex_agent.location))

